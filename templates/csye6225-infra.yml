AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC setup for CSYE6225 Assignment-06'
Parameters:
  EnvironmentName:
    Description: This variable is used to set the Tag for every resource created by this Template.
    Type: String
  VpcCIDR:
    Description: This CIDR notation is used to create the VPC.
    Type: String
    Default: 10.192.0.0/16
  Subnet1CIDR:
    Description: This CIDR notation is used to create the Subnet1 under the VPC defined above in Availability Zone1.
    Type: String
    Default: 10.192.10.0/24
  Subnet2CIDR:
    Description: This CIDR notation is used to create the Subnet2 under the VPC defined above in Availability Zone2.
    Type: String
    Default: 10.192.11.0/24
  Subnet3CIDR:
    Description: This CIDR notation is used to create the Subnet3 under the VPC defined above in Availability Zone3.
    Type: String
    Default: 10.192.12.0/24
  PrivateSubnet1CIDR:
    Description: This CIDR notation is used to create the Private Subnet1 under the VPC defined above in Availability Zone1.
    Type: String
    Default: 10.192.13.0/24
  PrivateSubnet2CIDR:
    Description: This CIDR notation is used to create the Private Subnet2 under the VPC defined above in Availability Zone2.
    Type: String
    Default: 10.192.14.0/24
  PrivateSubnet3CIDR:
    Description: This CIDR notation is used to create the Private Subnet3 under the VPC defined above in Availability Zone3.
    Type: String
    Default: 10.192.15.0/24
  AmiId:
    Description: This is the base AMI that we use to Instantiate the VM. This has SpringBoot and Mysql Inbuilt.
    Type: String
  ApplicationInstanceType:
    Description: This EC2 Instance type is used to start our VM.  
    Type: String
    Default: t2.micro
  DbUser:
    Description: This is the username for the Database.
    Type: String
  DbPassword:
    Description: This is the password for the Database.
    Type: String
  RandomString:
    Description: This is a random string used for S3 bucket name
    Type: String
  HostedZoneDomainName:
    Description: Domain name used for application reference to Public
    Type: String
  CodeDeployBucketName:
    Description: S3 Bucket used for pulling the Artifact.
    Type: String
  AccountId:
    Description: Account Id for the specific Organization.
    Type: String
  SEStopicArn:
    Description: SES Topic mail domain
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref Subnet3CIDR
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Public Subnet (AZ3)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Sub ${EnvironmentName} Public Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet1
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2
  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet3
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enabling the application accessible to only LoadBalancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
    DependsOn: LoadBalancerSecurityGroup
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enabling the Database accessible to only the Application Instance.
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref ApplicationSecurityGroup
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enabling port 80 and 443 on the Load balancer to public.
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: '0.0.0.0/0'
  Route53LoadBalancerMap:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref HostedZoneDomainName
      Type: A
      HostedZoneName: !Ref HostedZoneDomainName
      AliasTarget: 
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
        - Key: Application
          Value: Public facing webapp
      Type: application
    DependsOn: 
    - InternetGateway
    - Subnet1
    - Subnet2
    - Subnet3
    - LoadBalancerSecurityGroup
  PublicLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicLoadBalancerTargetGroup
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  AutoScalingGroupTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-launch-template'
      LaunchTemplateData:
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: "gp3"
            DeleteOnTermination: true
        ImageId: !Ref AmiId
        IamInstanceProfile:
          Name: !Ref IAMInstanceProfile
        InstanceType: !Ref ApplicationInstanceType
        NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: 0
          Groups:
          - !Ref ApplicationSecurityGroup
        KeyName: myKey
        UserData:
          Fn::Base64: !Sub
          -  | 
            #!/bin/bash
            cat > /etc/profile.d/spring_env.sh << 'EOF'
            export bucketName='${RandomString}.${EnvironmentName}.manojreddya.me'
            export databasehost=${databasehostname}
            export databaseuser=${DbUser}
            export databasepassword=${DbPassword}
            export snsTopicArn=${SNSTopic}
            EOF
            chmod 777 /etc/profile.d/spring_env.sh
            sudo systemctl restart application_boot.service
          - databasehostname: !GetAtt RDSInstance.Endpoint.Address
    DependsOn: 
    - RDSInstance
    - SNSTopic
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      Cooldown: '60'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref AutoScalingGroupTemplate
        Version: !GetAtt AutoScalingGroupTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '1'
      NewInstancesProtectedFromScaleIn: false
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref PublicLoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
  AutoScalingGroupCPUPolicyScaleUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      ScalingAdjustment: 1
  AutoScalingGroupCPUPolicyScaleDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      ScalingAdjustment: -1
  CloudWatchAlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Ref AutoScalingGroupCPUPolicyScaleDown
      AlarmDescription: 'Cloudwatch alarm for scaling down when CPU is < than 3% for 2 minutes'
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebAppAutoScalingGroup
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 3
  CloudWatchAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
      - !Ref AutoScalingGroupCPUPolicyScaleUp
      AlarmDescription: 'Cloudwatch alarm for scaling down when CPU is > than 5% for 2 minutes'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref WebAppAutoScalingGroup
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 5
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${RandomString}.${EnvironmentName}.manojreddya.me'  #Need to find a random String function
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: StorageRules
            Prefix: standardIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  RDSParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: MySQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: csye6225
      DBName: csye6225
      DBInstanceClass: db.t2.micro
      DeleteAutomatedBackups: true
      Engine: MySQL
      EngineVersion: 8.0.16
      AllocatedStorage: '5'
      MasterUsername: !Ref DbUser
      MasterUserPassword: !Ref DbPassword
      DBParameterGroupName: !Ref RDSParameterGroup
      VPCSecurityGroups: 
        - !Sub ${DatabaseSecurityGroup.GroupId}
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
    DependsOn: 
    - PrivateSubnet1
    - InternetGatewayAttachment
    - PrivateSubnet2
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB subnet group for RDS
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
  EC2CSYE6225IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This IAM Role is attached to the Application Servers EC2 machine
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: WebAppS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:DeleteObject'
              Resource: 
              - !Sub 'arn:aws:s3:::${RandomString}.${EnvironmentName}.manojreddya.me/*'
              - !Sub 'arn:aws:s3:::${RandomString}.${EnvironmentName}.manojreddya.me'
      - PolicyName: CodeDeployS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 's3:GetObject'
              Resource: 
              - !Sub 'arn:aws:s3:::${CodeDeployBucketName}/*'
              - !Sub 'arn:aws:s3:::${CodeDeployBucketName}'
      - PolicyName: SNSTopicPublish
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'sns:Publish'
              Resource:
              - !Ref SNSTopic
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Tags: 
      - Key: Name
        Value: 'Ec2IamS3Role'
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref EC2CSYE6225IamRole
  WebAppCodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: webapp
      ComputePlatform: Server
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
  WebappDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref WebAppCodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: webapp
      AutoScalingGroups:
      - Ref: WebAppAutoScalingGroup
    DependsOn:
    - WebAppAutoScalingGroup
    - CodeDeployServiceRole
    - WebAppCodeDeployApplication
  CodeDeployServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:*
                Resource: "*"
  WebAppCloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: csye6225-spring-boot
      RetentionInDays: 1
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
  WebAppCloudWatchLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: csye6225-spring-boot
      LogStreamName: webapp
    DependsOn:
    - WebAppCloudWatchLogGroup
  GithubActionsLambdaS3Copy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'Managed policy for Github CICD user to push lambda code to S3'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${EnvironmentName}.lambda.verifyuser'
              - !Sub 'arn:aws:s3:::${EnvironmentName}.lambda.verifyuser/*'
      ManagedPolicyName: githubActionsLambdaS3Upload
      Users:
        - githubActionsCiCd
  GithubActionsS3Copy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: 'Managed policy to Upload Artifact to S3'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:ListBucket'
            Resource: 
              - !Sub 'arn:aws:s3:::${CodeDeployBucketName}/*'
              - !Sub 'arn:aws:s3:::${CodeDeployBucketName}'
      ManagedPolicyName: githubActionsArtifactUpload
      Users: 
        - githubActionsCiCd
  GithubActionsCodeDeploy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: 'Managed policy to call Codedeploy API'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'codedeploy:CreateDeployment'
              - 'codedeploy:GetDeployment'
            Resource: '*'
          - Effect: Allow
            Action: 
              - 'codedeploy:GetDeploymentConfig'
            Resource:
              - !Sub 'arn:aws:codedeploy:us-east-1:${AccountId}:deploymentconfig:CodeDeployDefault.AllAtOnce'
          - Effect: Allow
            Action:
              - 'codedeploy:GetApplicationRevision'
              - 'codedeploy:RegisterApplicationRevision'
            Resource: 
              - !Sub 'arn:aws:codedeploy:us-east-1:${AccountId}:application:webapp'
      ManagedPolicyName: githubActionsCodeDeployAPI
      Users: 
        - githubActionsCiCd
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: snsTopic
      FifoTopic: false
      Subscription: 
        - Endpoint: !GetAtt LambdaServerless.Arn
          Protocol: lambda
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
      TopicName: snsTopic
    DependsOn: 
    - LambdaServerless
  LambdaServerless:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !Sub '${EnvironmentName}.lambda.verifyuser'
        S3Key: serverlessLambda.jar
      Description: This Lambda function is triggered by SNS to send mail to Users.
      Environment:
        Variables:
          domainName: !Ref SEStopicArn
      FunctionName: EmailVerificationLambda
      Handler: 'handler.MainHandler::handleRequest'
      PackageType: Zip
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: java11
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
    DependsOn: LambdaFunctionRole
  LambdaServerlessInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaServerless
      Principal: sns.amazonaws.com
    DependsOn: LambdaServerless
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This IAM Role is attached to the Lambda Function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: 
            Service:
              - 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: LambdaSESemailVerifyPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'ses:SendEmail'
                - 'ses:SendRawEmail'
              Resource: 
              - !Sub 'arn:aws:ses:us-east-1:${AccountId}:identity/${SEStopicArn}'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: token
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: token
          KeyType: RANGE
      TableName: userToken
      Tags: 
        - Key: Environment
          Value: !Ref EnvironmentName
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
Outputs:
  VPC:
    Description: A reference to the created VPC.
    Value: !Ref VPC
  Subnets:
    Description: A list of the Subnets created
    Value: !Join [ ",", [ !Ref Subnet1, !Ref Subnet2, !Ref Subnet3 ]]
  Subnet1:
    Description: Reference to the 1st Subnet in Availability Zone 1.
    Value: !Ref Subnet1
  Subnet2:
    Description: Reference to the 2nd Subnet in Availability Zone 2.
    Value: !Ref Subnet2
  Subnet3:
    Description: Reference to the 3rd Subnet in Availability Zone 3.
    Value: !Ref Subnet3
  InternetGateway:
    Description: Reference to the Internet Gateway created in Vpc.
    Value: !Ref InternetGateway